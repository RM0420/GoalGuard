import { supabase } from "../lib/supabaseClient";
import { Database } from "../types/database.types";

// Define DailyProgress type based on the Database schema
type DailyProgress = Database["public"]["Tables"]["daily_progress"]["Row"];

/**
 * Represents the data required to create or update a daily progress entry,
 * excluding fields automatically generated by the database (id, created_at)
 * or specifically handled (last_fetched_from_healthkit).
 * Now includes 'status'.
 */
export type UpsertDailyProgressData = Omit<
  DailyProgress,
  "id" | "created_at" | "last_fetched_from_healthkit"
  // 'status' is part of DailyProgress, so it's implicitly included unless Omitted.
  // No, Omit removes it. We need to make sure DailyProgress itself has status, and that this Omit doesn't exclude it
  // if it wasn't meant to be.
  // Correcting the thought: DailyProgress type should have status. Omit here is fine.
  // The issue is whether the CALLER provides it and if the UPSERT uses it.
  // Let's be explicit: we expect status to be part of the input.
  // The original Omit is fine if DailyProgress type from database.types.ts includes status.
  // Let's assume `DailyProgress` from `../types/database.types` correctly includes `status: string | null`.
>;

/**
 * Upserts a daily progress entry for a user.
 * If an entry for the given user_id, goal_id, and date already exists, it will be updated.
 * Otherwise, a new entry will be created.
 *
 * @param {UpsertDailyProgressData} progressEntry - The progress data to upsert, including status.
 * @returns {Promise<DailyProgress | null>} The upserted daily progress data or null if an error occurred.
 */
export const upsertDailyProgress = async (
  progressEntry: UpsertDailyProgressData
): Promise<DailyProgress | null> => {
  // Destructure all expected fields, including status
  const { user_id, goal_id, date, progress_data, status } = progressEntry;

  if (!user_id || !goal_id || !date || !progress_data || status === undefined) {
    // Check for status
    console.error(
      "upsertDailyProgress: Missing required fields (user_id, goal_id, date, progress_data, status).",
      progressEntry
    );
    return null;
  }

  try {
    // Get current timestamp in ISO format for last_fetched_from_healthkit
    const last_fetched_iso = new Date().toISOString();

    const { data, error } = await supabase
      .from("daily_progress")
      .upsert(
        {
          user_id,
          goal_id,
          date,
          progress_data,
          status, // Include status in the upsert payload
          last_fetched_from_healthkit: last_fetched_iso,
          // 'id' and 'created_at' will be handled by the database (for new rows)
          // or preserved (for existing rows on update).
        },
        {
          onConflict: "user_id,date", // Assumes a unique constraint on (user_id, date)
          // The default behavior of upsert is to perform an UPDATE if a conflict occurs.
          // If the row does not exist, it performs an INSERT.
        }
      )
      .select()
      .single(); // To get the upserted row back

    if (error) {
      console.error("Error upserting daily progress:", error);
      // Consider more specific error handling or re-throwing if needed
      return null;
    }

    console.log("Successfully upserted daily progress:", data);
    return data as DailyProgress; // Cast to DailyProgress, assuming select() returns the correct shape
  } catch (err) {
    console.error("Unexpected error in upsertDailyProgress:", err);
    return null;
  }
};

/**
 * `getDailyProgressHistory`
 * Fetches all daily progress entries for a given user, ordered by date descending.
 * Also fetches associated goal details (type, target_value, target_unit) for each progress entry.
 * @param {string} userId - The ID of the user whose progress history to fetch.
 * @param {number} [limit=30] - Optional limit for the number of entries to fetch.
 * @returns {Promise<{ data?: (DailyProgress & { goals: { goal_type: string | null; target_value: number | null; target_unit: string | null } | null })[]; error?: any }>}
 *          An array of daily progress entries with associated goal details or an error.
 */
export const getDailyProgressHistory = async (
  userId: string,
  limit: number = 30 // Default to fetching last 30 entries
): Promise<{
  data?: (DailyProgress & {
    goals: {
      goal_type: string | null;
      target_value: number | null;
      target_unit: string | null;
    } | null;
  })[];
  error?: any;
}> => {
  if (!userId) {
    console.error("getDailyProgressHistory: Missing required userId.");
    return { error: { message: "User ID is required." } };
  }

  try {
    const { data, error } = await supabase
      .from("daily_progress")
      .select(
        `
        *,
        goals ( 
          goal_type,
          target_value,
          target_unit
        )
      `
      )
      .eq("user_id", userId)
      .order("date", { ascending: false })
      .limit(limit);

    if (error) {
      console.error("Error fetching daily progress history:", error);
      return { error };
    }

    return { data: data || [] };
  } catch (err) {
    console.error("Unexpected error in getDailyProgressHistory:", err);
    return { error: err };
  }
};

// Potential future functions:
// - getDailyProgress(userId: string, date: string, goalId: string): Promise<DailyProgress | null>
// - getProgressHistory(userId: string, limit: number): Promise<DailyProgress[] | null] // Old comment, new one above is more specific
