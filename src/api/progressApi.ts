import { supabase } from "../lib/supabaseClient";
import { DailyProgress } from "../types/database.types";

/**
 * Represents the data required to create or update a daily progress entry,
 * excluding fields automatically generated by the database (id, created_at)
 * or specifically handled (last_fetched_from_healthkit).
 */
export type UpsertDailyProgressData = Omit<
  DailyProgress,
  "id" | "created_at" | "last_fetched_from_healthkit"
> & {
  // last_fetched_from_healthkit will be set to NOW() in the upsert operation typically
  // but can be overridden if needed, though usually not for new data from HealthKit.
};

/**
 * Upserts a daily progress entry for a user.
 * If an entry for the given user_id, goal_id, and date already exists, it will be updated.
 * Otherwise, a new entry will be created.
 *
 * @param {UpsertDailyProgressData} progressEntry - The progress data to upsert.
 * @returns {Promise<DailyProgress | null>} The upserted daily progress data or null if an error occurred.
 */
export const upsertDailyProgress = async (
  progressEntry: UpsertDailyProgressData
): Promise<DailyProgress | null> => {
  const { user_id, goal_id, date, progress_data } = progressEntry;

  if (!user_id || !goal_id || !date || !progress_data) {
    console.error(
      "upsertDailyProgress: Missing required fields.",
      progressEntry
    );
    return null;
  }

  try {
    // Get current timestamp in ISO format for last_fetched_from_healthkit
    const last_fetched_iso = new Date().toISOString();

    const { data, error } = await supabase
      .from("daily_progress")
      .upsert(
        {
          user_id,
          goal_id,
          date,
          progress_data,
          last_fetched_from_healthkit: last_fetched_iso,
          // 'id' and 'created_at' will be handled by the database (for new rows)
          // or preserved (for existing rows on update).
        },
        {
          onConflict: "user_id,date,goal_id", // Assumes a unique constraint on these columns
          // The default behavior of upsert is to perform an UPDATE if a conflict occurs.
          // If the row does not exist, it performs an INSERT.
        }
      )
      .select()
      .single(); // To get the upserted row back

    if (error) {
      console.error("Error upserting daily progress:", error);
      // Consider more specific error handling or re-throwing if needed
      return null;
    }

    console.log("Successfully upserted daily progress:", data);
    return data as DailyProgress; // Cast to DailyProgress, assuming select() returns the correct shape
  } catch (err) {
    console.error("Unexpected error in upsertDailyProgress:", err);
    return null;
  }
};

// Potential future functions:
// - getDailyProgress(userId: string, date: string, goalId: string): Promise<DailyProgress | null>
// - getProgressHistory(userId: string, limit: number): Promise<DailyProgress[] | null>
